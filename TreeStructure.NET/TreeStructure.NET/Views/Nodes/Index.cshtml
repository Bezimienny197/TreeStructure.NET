@model IEnumerable<TreeStructure.NET.Models.Node>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Value)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Value)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.NodeId">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.NodeId">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.NodeId">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
<div id="dataTree"></div>

<script type="text/javascript">
    var nodes = @Html.Raw(ViewBag.Json)

    var dataTree = document.getElementById("dataTree")
    var treeList = document.createElement("ul")
    treeList.setAttribute("id", "root")
    treeList.classList.add("roots-list");
    dataTree.appendChild(treeList)

    var ctr
    do {
        ctr = 0
        nodes.forEach(addToTree)
    } while(ctr > 0 && ctr <= nodes.length)

    function addToTree(item, index) {
        // Czy nie jest jeszcze "narysowany"
        if (item["isDrowed"] == undefined) {
            // Czy item posiada węzeł nadrzędny, jeśli nie, dodaj do głównej listy
            if (item["RootId"] == null) {
                createRootLi(item, treeList)
            } else {
                let parentList = document.getElementById("list#" + item["RootId"])
                // Sprawdź, czy istnieje już lista węzła nadrzędnego
                if (parentList != null) {
                    createChildLi(item, parentList)
                } else {
                    let parent = document.getElementById("node#" + item["RootId"])
                    // Sprawdź, czy został już dodany węzeł nadrzędny
                    if (parent != null) {
                        parentList = document.createElement("ul")
                        parentList.setAttribute("id", "list#" + item["RootId"])
                        parentList.classList.add("childs-list");
                        parent.classList.add("arrow")

                        parent.parentNode.insertBefore(parentList, parent.nextSibling)
                        createChildLi(item, parentList)
                    }
                }
            }
        }
    }

    function createChildLi(item, list) {
        createLi(item, list, "child-item")
    }

    function createRootLi(item, list) {
        createLi(item, list, "root-item")
    }

    function createLi(item, list, cssClass) {
        let li = document.createElement("li")
        li.appendChild(document.createTextNode(item["Value"]))
        li.setAttribute("id", "node#" + item["NodeId"])
        li.classList.add("tree-item");
        li.classList.add(cssClass);
        list.appendChild(li)
        item["isDrowed"] = true
        ctr++
    }

</script>