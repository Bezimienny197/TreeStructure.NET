@model IEnumerable<TreeStructure.NET.Models.Node>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Value)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Value)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.NodeId">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.NodeId">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.NodeId">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>
<div class="button-bar">
    <div class="button-group">
        <input type="button" value="Rozwiń całe drzewo" id="show-tree-button" class="green-button" />
        <input type="button" value="Zwiń całe drzewo" id="hide-tree-button" class="green-button" />
    </div>
    <div class="button-group">
        <input type="button" value="Dodaj nowy element" class="green-button" />
    </div>
</div>
<div id="dataTree"></div>

<script type="text/javascript">

    try {
        var nodes = @Html.Raw(ViewBag.Json)

        NodeList.prototype.forEach = Array.prototype.forEach

        var dataTree = document.getElementById("dataTree")
        var treeList = document.createElement("ul")
        treeList.setAttribute("id", "root")
        treeList.classList.add("roots-list");
        dataTree.appendChild(treeList)

        document.getElementById("show-tree-button").onclick = function () { showTree(this); };
        document.getElementById("hide-tree-button").onclick = function () { hideTree(this); };

        var ctr
        do {
            ctr = 0
            nodes.forEach(addToTree)
        } while (ctr > 0 && ctr <= nodes.length)
    } catch (e) {
        console.log(e);
    }

    function addToTree(item, index) {
        // Czy nie jest jeszcze "narysowany"
        if (item["isDrowed"] == undefined) {
            // Czy item posiada węzeł nadrzędny, jeśli nie, dodaj do głównej listy
            if (item["RootId"] == null) {
                createRootLi(item, treeList)
            } else {
                let parentList = document.getElementById("list#" + item["RootId"])
                // Sprawdź, czy istnieje już lista węzła nadrzędnego
                if (parentList != null) {
                    createChildLi(item, parentList)
                } else {
                    let parent = document.getElementById("node#" + item["RootId"])
                    // Sprawdź, czy został już dodany węzeł nadrzędny
                    if (parent != null) {
                        parentList = document.createElement("ul")
                        parentList.setAttribute("id", "list#" + item["RootId"])
                        parentList.classList.add("childs-list")
                        parentList.style.display = "none"

                        arrow = document.createElement("div")
                        arrow.classList.add("arrow")
                        parent.insertBefore(arrow, parent.firstChild);

                        parent.onclick = function () { showChildren(this); };

                        parent.parentNode.insertBefore(parentList, parent.nextSibling)
                        createChildLi(item, parentList)
                    }
                }
            }
        }
    }

    function createChildLi(item, list) {
        createLi(item, list, "child-item")
    }

    function createRootLi(item, list) {
        createLi(item, list, "root-item")
    }

    function createLi(item, list, cssClass) {
        let li = document.createElement("li")
        li.appendChild(document.createTextNode(item["Value"]))
        li.setAttribute("id", "node#" + item["NodeId"])
        li.classList.add("tree-item");
        li.classList.add(cssClass);
        list.appendChild(li)
        item["isDrowed"] = true
        ctr++
    }

    function showChildren(element) {
        element.nextSibling.style.display = "list-item"
        element.firstChild.style.transform = "rotate(45deg)"
        element.firstChild.style.webkitTransform = "rotate(45deg)"
        element.firstChild.style.borderColor = "#808080"
        element.onclick = function () { hideChildren(this); };
    }

    function showAllChildren(element) {
        let childList = element.nextSibling

        if (childList != null && childList.tagName == 'UL') {
            showChildren(element)

            childList.childNodes.forEach(function (item) {
                showAllChildren(item)
            })
        }
    }

    function hideChildren(element) {
        let childList = element.nextSibling

        if (childList != null && childList.tagName == 'UL') {
            childList.style.display = "none"
            element.firstChild.style.transform = "rotate(-45deg)"
            element.firstChild.style.webkitTransform = "rotate(-45deg)"
            element.firstChild.style.borderColor = "#30772e"
            element.onclick = function () { showChildren(this); };

            childList.childNodes.forEach(function (item) {
                hideChildren(item)
            })
        }
    }

    function showTree() {
        treeList.childNodes.forEach(function (item) {
            showAllChildren(item)
        })
    }

    function hideTree() {
        treeList.childNodes.forEach(function (item) {
            hideChildren(item)
        })
    }

</script>